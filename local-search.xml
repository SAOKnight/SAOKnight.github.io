<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ADC</title>
    <link href="/2022/05/21/ADC/"/>
    <url>/2022/05/21/ADC/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Keil C51的安装</title>
    <link href="/2022/05/21/keilc51/"/>
    <url>/2022/05/21/keilc51/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Keil-C51的下载"><a href="#1-Keil-C51的下载" class="headerlink" title="1. Keil C51的下载"></a>1. Keil C51的下载</h2><h3 id="1-1-进入Keil-官网"><a href="#1-1-进入Keil-官网" class="headerlink" title="1.1 进入Keil 官网"></a>1.1 进入<a href="https://www.keil.com/"><strong>Keil 官网</strong></a></h3><h3 id="1-2-点击Download按钮"><a href="#1-2-点击Download按钮" class="headerlink" title="1.2 点击Download按钮"></a>1.2 点击<strong>Download</strong>按钮</h3><p><img src="/images/DOWNLOAD.png" alt="Download"></p><h3 id="1-3-点击Product-Download"><a href="#1-3-点击Product-Download" class="headerlink" title="1.3 点击Product Download"></a>1.3 点击<strong>Product Download</strong></h3><p><img src="/images/product_download.png" alt="Product Download"></p><h3 id="1-4-选择C51"><a href="#1-4-选择C51" class="headerlink" title="1.4 选择C51"></a>1.4 选择<strong>C51</strong></h3><p><img src="/images/c51_download.png" alt="C51"></p><h3 id="1-5-填写用户信息"><a href="#1-5-填写用户信息" class="headerlink" title="1.5 填写用户信息"></a>1.5 填写用户信息</h3><p>随意填写，开心就好。填完之后点击<strong>Submit</strong>按钮进行下一步<br><img src="/images/submit.png" alt="User Info"></p><h3 id="1-6-下载Keil-C51"><a href="#1-6-下载Keil-C51" class="headerlink" title="1.6 下载Keil C51"></a>1.6 下载Keil C51</h3><p>点击下方的.EXE开始下载<br><img src="/images/exe.png" alt="Download"></p><h2 id="2-Keil-C51的安装"><a href="#2-Keil-C51的安装" class="headerlink" title="2. Keil C51的安装"></a>2. Keil C51的安装</h2><p>Keil C51集成开发环境的安装比较简单（基本上就是一路Next下去）。</p><h3 id="2-1-第一步"><a href="#2-1-第一步" class="headerlink" title="2.1 第一步"></a>2.1 第一步</h3><p>双击安装包，进入安装向导界面，点击“<strong>Next</strong>”<br><img src="/images/2.1.png" alt="第一步"></p><h3 id="2-2-第二步"><a href="#2-2-第二步" class="headerlink" title="2.2 第二步"></a>2.2 第二步</h3><p>勾选“<strong>I agree to…**”，点击“</strong>Next**”<br><img src="/images/2.2.png" alt="第二步"></p><h3 id="2-3-第三步"><a href="#2-3-第三步" class="headerlink" title="2.3 第三步"></a>2.3 第三步</h3><p>选择路径（可以默认），点击“<strong>Next</strong>”<br><img src="/images/2.3.png" alt="第三步"></p><h3 id="2-4-第四步"><a href="#2-4-第四步" class="headerlink" title="2.4 第四步"></a>2.4 第四步</h3><p>填写信息（可以随便填写），点击“<strong>Next</strong>”<br><img src="/images/2.4.png" alt="第四步"></p><h3 id="2-5-第五步"><a href="#2-5-第五步" class="headerlink" title="2.5 第五步"></a>2.5 第五步</h3><p>安装过程需要等待两分钟，最后点击“<strong>Finish</strong>”就安装完成<br><img src="/images/2.5.png" alt="第五步"><br><img src="/images/2.5.1.png" alt="第五步"></p><h2 id="3-Keil-C51的破解注册"><a href="#3-Keil-C51的破解注册" class="headerlink" title="3. Keil C51的破解注册"></a>3. Keil C51的破解注册</h2><p><strong>Keil C51</strong>是一个收费的软件，官方打击盗版也比较严厉，若你是商业用途，建议购买正版软件。<br><a href="https://www.aliyundrive.com/s/HJVbMbk59vC"><strong><del>注册机下载</del></strong></a></p><h3 id="3-1-第一步"><a href="#3-1-第一步" class="headerlink" title="3.1 第一步"></a>3.1 第一步</h3><p>打开上面安装好的<strong>Keil C51</strong>，以管理员身份运行软件（选中<strong>Keil uVision5</strong> -&gt; 右键 -&gt; 以管理员身份运行）</p><h3 id="3-2-第二步"><a href="#3-2-第二步" class="headerlink" title="3.2 第二步"></a>3.2 第二步</h3><p>打开注册管理窗口（<strong>File -&gt; License Management</strong>），并复制CID。<br><img src="/img/QQ%E6%88%AA%E5%9B%BE20220806133514.png" alt="第二步"></p><h3 id="3-3-第三步"><a href="#3-3-第三步" class="headerlink" title="3.3 第三步"></a>3.3 第三步</h3><p>打开“注册机”：(1)粘贴上面复制的CID，(2)目标选择C51，(3)生成注册码，(4)复制注册码<br><img src="/img/QQ%E6%88%AA%E5%9B%BE20220806133523.png" alt="第三步"></p><h3 id="3-4-第四步"><a href="#3-4-第四步" class="headerlink" title="3.4 第四步"></a>3.4 第四步</h3><p>回到注册界面：(1)粘贴上面生成的“注册码”，(2)点击“<strong>Add LIC</strong>”，(3)看见显示信息说明注册成功。<br><img src="/img/QQ%E5%9B%BE%E7%89%8720220806134100.png" alt="第四步"></p><h2 id="4-Keil-C51在VSCode下的使用"><a href="#4-Keil-C51在VSCode下的使用" class="headerlink" title="4. Keil C51在VSCode下的使用"></a>4. Keil C51在VSCode下的使用</h2><p>由于Keil及其简陋的界面风格以及难用的代码补全功能，我个人推荐使用VSCode来配合Keil来进行单片机的开发。</p><h3 id="4-1-第一步"><a href="#4-1-第一步" class="headerlink" title="4.1 第一步"></a>4.1 第一步</h3><p>在VSCode的扩展(Ctrl+Shift+X)中搜索<strong>Embedded IDE</strong>并且安装<br><img src="/img/c51.4.1.png" alt="第一步"></p><h3 id="4-2-第二步"><a href="#4-2-第二步" class="headerlink" title="4.2 第二步"></a>4.2 第二步</h3><p>在拓展的设置界面中<strong>EIDE.C51.INI</strong>一项中设置你所安装的Keil路径，例如 <em>“F:\Keil C51\UV4\UV4.exe”</em><br><img src="/img/c51.4.2.png" alt="第二步"></p><p>关于EIDE的详细介绍可参考官方<a href="https://github.com/github0null/eide/blob/master/README_ZH-CN.md">README文档</a>以及<a href="https://docs.em-ide.com/">使用手册</a></p><h2 id="5-STC-ISP下载以及资源的导入"><a href="#5-STC-ISP下载以及资源的导入" class="headerlink" title="5. STC-ISP下载以及资源的导入"></a>5. STC-ISP下载以及资源的导入</h2><p>在官方<a href="https://www.stcisp.com/_download_stcisp_new.html">下载链接</a>下载STC-运行其中的.exe可执行文件。选择Keil仿真设置，导入头文件到Keil。至此，完成了STC系列芯片的资源导入。<br><img src="/img/STC%E5%AF%BC%E5%85%A5.png" alt="头文件导入"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PWM信号的产生与电机的驱动</title>
    <link href="/2022/05/19/pwmdj/"/>
    <url>/2022/05/19/pwmdj/</url>
    
    <content type="html"><![CDATA[<h2 id="PWM的原理"><a href="#PWM的原理" class="headerlink" title="PWM的原理"></a>PWM的原理</h2><h3 id="1-1-PWM是什么？"><a href="#1-1-PWM是什么？" class="headerlink" title="1.1 PWM是什么？"></a>1.1 PWM是什么？</h3><p><strong>PWM</strong>表示脉冲宽度调制，现在我们先将<strong>PWM</strong>理解为一种信号，它可以从微控制器或555定时器等数字集成电路中产生，它是一系列脉冲，这些脉冲将以方波的形式出现。也就是说，在任何给定的时间点，波型要么是高电平或者是低电平。为了便于理解，让我们假设有一个<strong>5V</strong>的<strong>PWM</strong>信号，高电平时<strong>PWM</strong>信号电压是<strong>5V</strong>，低电平时<strong>PWM信号</strong>是<strong>0V</strong>。信号保持在高电平的持续时间称为“接通时间”，信号保持在低电平的持续时间称为“断开时间”。对于<strong>PWM</strong>信号我们需要关注两个与之相关的重要参数，一个是<strong>PWM</strong>占空比，另一个是<strong>PWM</strong>信号的频率。</p><h3 id="1-2-PWM的占空比"><a href="#1-2-PWM的占空比" class="headerlink" title="1.2 PWM的占空比"></a>1.2 PWM的占空比</h3><p>如前面所述，<strong>PWM</strong>信号在特定的时间内保持接通状态，然后在剩余的时间内保持断开状态。占空比是指在一个脉冲循环内，接通时间相对于总时间所占的比例。在一段连续工作时间内脉冲高电平时间与总时间的比值。如果信号总是处于高电平，它的占空比是百分之百；如果信号总是处于低电平，那么它的占空比是百分之零。计算占空比的公式如下所示：</p><p><strong>占空比 =接通时间 / (接通时间 + 断开时间)</strong></p><h3 id="1-3-PWM的频率"><a href="#1-3-PWM的频率" class="headerlink" title="1.3 PWM的频率"></a>1.3 PWM的频率</h3><p><strong>PWM</strong>信号的频率决定了<strong>PWM</strong>完成一个信号周期的速度。周期是指<strong>PWM</strong>信号完成一个接通和关闭的时间。计算频率的公式如下所示</p><p><strong>频率 = 1 / 总持续时间</strong><br><strong>总持续时间 = 接通时间 + 断开时间</strong></p><h2 id="PWM的产生"><a href="#PWM的产生" class="headerlink" title="PWM的产生"></a>PWM的产生</h2><p>产生的途径主要有4个，这个主要是针对增强版的单片机而言。</p><h3 id="2-1-延时"><a href="#2-1-延时" class="headerlink" title="2.1 延时"></a>2.1 延时</h3><p>思路：比如在<strong>P10</strong>口产生<strong>PWM</strong>波形，可以这么实现：<br>大概代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">P10=<span class="hljs-number">1</span>;<br>delay(时间<span class="hljs-number">1</span>);<br>P10=<span class="hljs-number">0</span>;<br>delay(时间<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>这样，时间1+时间2=周期；<br>频率等于周期的倒数。<br>占空比=时间1/周期；<br>这个比较占用内部资源，不建议这么做。</p><h3 id="2-2-定时器产生PWM。"><a href="#2-2-定时器产生PWM。" class="headerlink" title="2.2 定时器产生PWM。"></a>2.2 定时器产生PWM。</h3><p>这个普通的<strong>51单片机</strong>经常这么用。<br>网上有比较多资料说到这一点内容。具体不说，自己查资料。<br>缺点是，占用一个定时器资源。可以使用。</p><h3 id="2-3-内部PWM模块产生。"><a href="#2-3-内部PWM模块产生。" class="headerlink" title="2.3 内部PWM模块产生。"></a>2.3 内部PWM模块产生。</h3><p>是这篇博客所使用的方法</p><h3 id="2-4-PCA模块产生PWM。"><a href="#2-4-PCA模块产生PWM。" class="headerlink" title="2.4 PCA模块产生PWM。"></a>2.4 PCA模块产生PWM。</h3><p>可以自己去网上找资料了解</p><h2 id="STC8A8K的PWM原理和相关寄存器"><a href="#STC8A8K的PWM原理和相关寄存器" class="headerlink" title="STC8A8K的PWM原理和相关寄存器"></a>STC8A8K的PWM原理和相关寄存器</h2><p>先看说明书的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    P_SW2 = <span class="hljs-number">0x80</span>;    <span class="hljs-comment">//打开设置开关</span><br>    PWMCKS = <span class="hljs-number">0x00</span>;   <span class="hljs-comment">//1.PWM时钟为系统时钟</span><br>    PWMC = <span class="hljs-number">0x1000</span>;   <span class="hljs-comment">//2.设置PWM周期为1000H个PWM时钟</span><br>    PWM0T1= <span class="hljs-number">0x0100</span>;  <span class="hljs-comment">//3.在计数值为100H地方输出低电平</span><br>    PWM0T2= <span class="hljs-number">0x0500</span>;  <span class="hljs-comment">//4.在计数值为500H地方输出高电平</span><br>    PWM0CR= <span class="hljs-number">0x80</span>;    <span class="hljs-comment">//5.使能PWM0输出</span><br>    P_SW2 = <span class="hljs-number">0x00</span>;    <span class="hljs-comment">//关闭设置开关</span><br><br>    PWMCR = <span class="hljs-number">0x80</span>;    <span class="hljs-comment">//6.启动PWM模块</span><br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>有6个步骤。我们把这个步骤每个细节的寄存器了解清楚，就可以设置了。</p><ul><li>设置<strong>PWM</strong>时钟源。</li><li>设置<strong>PWM</strong>周期。</li><li>设置<strong>PWM</strong>的翻转点<strong>T1</strong>。</li><li>设置<strong>PWM</strong>的翻转点<strong>T2</strong>。</li><li>设置<strong>PWM</strong>的具体口允许输出<strong>PWM</strong>。</li><li>设置<strong>PWM</strong>的大门允许输出。</li></ul><h3 id="3-1-设置PWM时钟源"><a href="#3-1-设置PWM时钟源" class="headerlink" title="3.1 设置PWM时钟源"></a>3.1 设置PWM时钟源</h3><p>这个类比于心跳频率，这个决定之后，按照定时计数器，计算跳动的次数，就得到时间，就可以有周期等概念。<br>单片机内部的<strong>PWM</strong>模块，其实是利用计数器的功能。</p><table align="center">    <tr>        <td align="center">符号</td>        <td align="center">地址</td>        <td align="center">B7</td>        <td align="center">B6</td>        <td align="center">B5</td>        <td align="center">B4</td>        <td align="center">B3</td>        <td align="center">B2</td>        <td align="center">B1</td>        <td align="center">B0</td>    </tr>    <tr>        <td align="center">PWMCKS</td>        <td align="center">FFF2H</td>        <td align="center">-</td>        <td align="center">-</td>        <td align="center">-</td>        <td align="center">SELT2</td>        <td colspan="4" align="center">PWM_PS[3:0]</td>       </tr></table><blockquote><p><strong>SELT2</strong>: <strong>PWM</strong>时钟源选择</p><blockquote><p>0: <strong>PWM</strong>时钟源为系统时钟经分频器分频之后的时钟<br>1: <strong>PWM</strong>时钟源为定时器2的溢出脉冲</p></blockquote><p><strong>PWM_ PS[3:0]</strong>: 系统时钟预分频参数</p></blockquote><table><thead><tr><th align="center">SELT2</th><th align="center">PWM_PS[3:0]</th><th align="center">PWM输入时钟源频率</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">xxxx</td><td align="center">定时器2的溢出脉冲</td></tr><tr><td align="center">0</td><td align="center">0000</td><td align="center">SYSclk/1</td></tr><tr><td align="center">0</td><td align="center">0001</td><td align="center">SYSclk/2</td></tr><tr><td align="center">0</td><td align="center">0010</td><td align="center">SYSclk/3</td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0</td><td align="center">x</td><td align="center">SYSclk/(x+1)</td></tr><tr><td align="center">.</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">0</td><td align="center">1111</td><td align="center">SYSclk/16</td></tr></tbody></table><p>上面的表格，是设定<strong>PWM</strong>的时钟源。就是计数的心跳，可以根据自己的需求进行设置。</p><p><strong>本实验用的是：</strong><br>1、分频后的时钟，所以<strong>SELT2=0</strong>，<br>2、分频的系数是<strong>12</strong>，所以<strong>PWM-PS=1011</strong>，<br>所以<br><strong>PWMCKS=00001011=0x0B</strong>；<br>这个语句的作用是，设定PWM时钟源是晶振频率的12分之一。<br>就是<strong>FPWM=11.0592Mhz/12=11059200/12.</strong><br>(因为下载的时候，选择了<strong>11.0592Mhz</strong>频率)</p><h3 id="3-2-设置PWM周期"><a href="#3-2-设置PWM周期" class="headerlink" title="3.2 设置PWM周期"></a>3.2 设置PWM周期</h3><p>当设定了<strong>PWM</strong>时钟频率<strong>FPWM</strong>，计数假设为<strong>N</strong>，<br><code>N 的范围是(1-32767，因为是15位计数器，最大设定数值是32767)</code><br>假设时钟周期为时钟频率的倒数，设为<strong>TPWM</strong>,<br>那么<strong>TPWM=1/FPWM</strong>,<br><strong>PWM</strong>的周期<strong>TSETPWM=N1/FPWM=NTPWM</strong>,<br><strong>PMW</strong>的频率是<strong>PWM</strong>周期的倒数，则是<br><strong>FSETPWM=1/TSETPWM=FPWM/N=11059200/12/N=921600/N</strong>（公式1）<br>根据公式1<br>假如外部设定了<strong>FSETPWM</strong>，那么反推出<strong>N</strong>，<br>得到<strong>N=921600/FSETPWM</strong>。</p><p>所以设定的周期<br><strong>PWMC=921600/FSETPWM</strong><br>表格中是将<strong>PWMC</strong>分为了高八位<strong>PWMCH</strong>和低八位<strong>PWMCL</strong>，我们直接写进去<strong>PWMC</strong>就可以了。</p><table>    <tr>        <td align="center">符号</td>        <td align="center">地址</td>        <td align="center">B7</td>        <td align="center">B6</td>        <td align="center">B5</td>        <td align="center">B4</td>        <td align="center">B3</td>        <td align="center">B2</td>        <td align="center">B1</td>        <td align="center">B0</td>    </tr>    <tr>        <td align="center">PWMCH</td>        <td align="center">FFF0H</td>        <td align="center">-</td>        <td colspan="7" align="center"></td>    </tr>    <tr>        <td align="center">PWMCL</td>        <td align="center">FFF1H</td>        <td colspan="8" align="center">        </td>    </tr></table><blockquote><p><strong>PWM计数器</strong>为一个15位的寄存器，可设定<strong>1-32767</strong>之间的任意值作为 <strong>PWM</strong> 的周期。<br><strong>PWM波形发生器</strong>内部的计数器从0开始计数，每个<strong>PWM时钟周期</strong>递增1,当内部计数器<br>的计数值达到 <strong>[PWMCH,PWMCL]</strong> 所设定的<strong>PWM周期</strong>时，<strong>PWM波形发生器</strong>内部的计数器<br>将会从0重新开始开始计数，硬件会自动将<strong>PWM</strong>归零中断中断标志位<strong>CBIF</strong>置1,若<strong>ECBI=1</strong>,<br>程序将跳转到相应中断入口执行中断服务程序。</p></blockquote><h3 id="3-3-设置PWM的翻转"><a href="#3-3-设置PWM的翻转" class="headerlink" title="3.3 设置PWM的翻转"></a>3.3 设置PWM的翻转</h3><table>    <tr align="center">        <td>符号</td>        <td>地址</td>        <td>B7</td>        <td>B6</td>        <td>B5</td>        <td>B4</td>        <td>B3</td>        <td>B2</td>        <td>B1</td>        <td>B0</td>    </tr>    <tr align="center">        <td>PWM0T1L</td>        <td>FF00H</td>        <td>-</td>        <td colspan="7" ></td>    </tr>    <tr align="center">        <td>PWM0T1H</td>        <td>FF01H</td>        <td colspan="8" ></td>    </tr>    <tr align="center">        <td>PWM0T2L</td>        <td>FF02H</td>        <td>-</td>        <td colspan="7" ></td>    </tr>    <tr align="center">        <td>PWM0T2H</td>        <td>FF03H</td>        <td colspan="8" ></td>    </tr>    <tr align="center">        <td>PWM1T1L</td>        <td>FF10H</td>        <td>-</td>        <td colspan="7"></td>    </tr>    <tr align="center">        <td>PWM1T1H</td>        <td>FF11H</td>        <td colspan="8"></td>    </tr>    <tr align="center">        <td>PWM1T2L</td>        <td>FF12H</td>        <td>-</td>        <td colspan="7"></td>    </tr>    <tr align="center">        <td>PWM1T2H</td>        <td>FF13H</td>        <td colspan="8"></td>    </tr>    <tr align="center">        <td>PWM2T1L</td>        <td>FF20H</td>        <td>-</td>        <td colspan="7"></td>    </tr>    <tr align="center">        <td>PWM2T1H</td>        <td>FF21H</td>        <td colspan="8"></td>    </tr>    <tr align="center">        <td>PWM2T2L</td>        <td>FF22H</td>        <td>-</td>        <td colspan="7"></td>    </tr>    <tr align="center">        <td>PWM2T2H</td>        <td>FF23H</td>        <td colspan="8"></td>    </tr>    <tr align="center">        <td>...</td>        <td>...</td>        <td colspan="8">...</td>    </tr>    <tr align="center">        <td>PWM7T1L</td>        <td>FF70H</td>        <td>-</td>        <td colspan="7"></td>    </tr>    <tr align="center">        <td>PWM7T1H</td>        <td>FF71H</td>        <td colspan="8"></td>    </tr>    <tr align="center">        <td>PWM7T2L</td>        <td>FF72H</td>        <td>-</td>        <td colspan="7"></td>    </tr>    <tr align="center">        <td>PWM7T2H</td>        <td>FF73H</td>        <td colspan="8"></td>    </tr></table><blockquote><p>PWM每个通道的 <strong>{PWMnT1H, PWMnT1L}</strong> 和 <strong>{PWMnT2H, PWMnT2L}</strong> 分别组合成两个15位的寄存器，<br>用于控制各路<strong>PWM</strong>每个周期中输出<strong>PWM</strong>波形的两个触发点。在<strong>PWM</strong>的计数周期中，当<strong>PWM</strong>的<br>内部计数值与所设置的<strong>T1</strong>的值 <strong>{PWMnT1H, PWMnT1L}</strong> 相等时，<strong>PWM</strong>的输出波形输出<strong>低电平</strong>;当<br><strong>PWM</strong>的内部计数值与所设置的<strong>T2</strong>的值 <strong>{PWMnT2H,PWMnT2L}</strong> 相等时，<strong>PWM</strong>的输出波形输出 <strong>高<br>电平</strong> 。</p><blockquote><p>注意:当 <strong>{PWMniT1H, PWMniT1L}</strong> 与 <strong>{PWMniT2H, PWMniT2L}</strong> 的值设置相等时，若<strong>PWM</strong>的内部计数<br>值与所设置的<strong>T1/T2</strong>的值相等，则会固定输出<strong>低电平</strong>。</p></blockquote></blockquote><p>这里讲解第一个作为例子，<br><strong>[PWM0T1H,PWM0T1L]</strong><br><strong>[PWM0T2H,PWM0T2L]</strong><br>有两个翻转点，<strong>PWM0T1</strong>和<strong>PWM0T2</strong>。<br>当<strong>PWM计数器内部计数数值=PWM1T1</strong>，会反转一次变为低电平<br><code>需要设置初始电平是高电平</code><br>当<strong>PWM计数器内部计数数值=PWM1T2</strong>,会翻转第二次，变为高电平。</p><h3 id="3-4-设置PWM的具体口允许输出PWM"><a href="#3-4-设置PWM的具体口允许输出PWM" class="headerlink" title="3.4 设置PWM的具体口允许输出PWM"></a>3.4 设置PWM的具体口允许输出PWM</h3><table>    <tr align="center">        <td>符号</td>        <td>地址</td>        <td>B7</td>        <td>B6</td>        <td>B5</td>        <td>B4</td>        <td>B3</td>        <td>B2</td>        <td>B1</td>        <td>B0</td>    </tr>    <tr align="center">        <td>PWM0CR</td>        <td>FF04H</td>        <td>ENC0O</td>        <td>C0INI</td>        <td>-</td>        <td colspan="2">C0_S[1:0]</td>        <td>EC0I</td>        <td>EC0T2SI </td>        <td>EC0T1SI </td>    </tr>    <tr align="center">        <td>PWM1CR</td>        <td>FF14H</td>        <td>ENC1O</td>        <td>C1INI</td>        <td>-</td>        <td colspan="2">C1_S[1:0]</td>        <td>EC1I</td>        <td>EC1T2SI </td>        <td>EC1T1SI </td>    </tr>    <tr align="center">        <td>PWM2CR</td>        <td>FF24H</td>        <td>ENC2O</td>        <td>C2INI</td>        <td>-</td>        <td colspan="2">C2_S[1:0]</td>        <td>EC2I</td>        <td>EC2T2SI </td>        <td>EC2T1SI </td>    </tr>    <tr align="center">        <td>PWM3CR</td>        <td>FF34H</td>        <td>ENC3O</td>        <td>C3INI</td>        <td>-</td>        <td colspan="2">C3_S[1:0]</td>        <td>EC3I</td>        <td>EC3T2SI </td>        <td>EC3T1SI </td>    </tr>    <tr align="center">        <td>PWM4CR</td>        <td>FF44H</td>        <td>ENC40</td>        <td>C4INI</td>        <td>-</td>        <td colspan="2">C4_S[1:0]</td>        <td>EC4I</td>        <td>EC4T2SI </td>        <td>EC4T1SI </td>    </tr>    <tr align="center">        <td>PWM5CR</td>        <td>FF54H</td>        <td>ENC5O</td>        <td>C5INI</td>        <td>-</td>        <td colspan="2">C5_S[1:0]</td>        <td>EC5I</td>        <td>EC5T2SI </td>        <td>EC5T1SI </td>    </tr>    <tr align="center">        <td>PWM6CR</td>        <td>FF64H</td>        <td>ENC6O</td>        <td>C6INI</td>        <td>-</td>        <td colspan="2">C6_S[1:0]</td>        <td>EC6I</td>        <td>EC6T2SI </td>        <td>EC6T1SI </td>    </tr>    <tr align="center">        <td>PWM7CR</td>        <td>FF74H</td>        <td>ENC7O</td>        <td>C7INI</td>        <td>-</td>        <td colspan="2">C7_S[1:0]</td>        <td>EC7I</td>        <td>EC7T2SI </td>        <td>EC7T1SI </td>    </tr></table><blockquote><p><strong>ENCnO</strong>:<strong>PWM</strong>输出使能位</p><blockquote><p><strong>0</strong>:相应<strong>PWM</strong>通道的端口为<strong>GPIO</strong><br><strong>1</strong>:相应<strong>PWM</strong>通道的端口为<strong>PWM</strong>输出口，受<strong>PWM</strong>波形发生器控制</p></blockquote><p><strong>CnINI</strong>:设置<strong>PWM</strong>输出端口的初始电平</p><blockquote><p><strong>0</strong>:第n通道的<strong>PWM</strong>初始电平为低电平<br><strong>1</strong>:第n通道的<strong>PWM</strong>初始电平为高电平</p></blockquote><p><strong>Cn_ S[1:0]</strong>: <strong>PWM</strong>输出功能脚切换选择，请参考下一个表格。</p><p><strong>ECnI</strong>:第n通道的<strong>PWM</strong>中断使能控制位</p><blockquote><p><strong>0</strong>:关闭第n通道的<strong>PWM</strong>中断<br><strong>1</strong>:使能第n通道的<strong>PWM</strong>中断</p></blockquote><p><strong>ECnT2SI</strong>:第n通道的<strong>PWM</strong>在第2个触发点中断使能控制位</p><blockquote><p><strong>0</strong>:关闭第n通道的<strong>PWM</strong>在第2个触发点中断<br><strong>1</strong>:使能第n通道的<strong>PWM</strong>在第2个触发点中断</p></blockquote><p><strong>ECnTISI</strong>:第n通道的<strong>PWM</strong>在第1个触发点中断使能控制位</p><blockquote><p><strong>0</strong>:关闭第n通道的<strong>PWM</strong>在第1个触发点中断<br><strong>1</strong>:使能第n通道的<strong>PWM</strong>在第1个触发点中断</p></blockquote></blockquote><p>例：C0_S[1:0]:增强型PWM通道0输出脚选择位</p><table><thead><tr><th align="center">C0_S[1:0]</th><th align="center">PWM0</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">P2.0</td></tr><tr><td align="center">01</td><td align="center">P1.0</td></tr><tr><td align="center">10</td><td align="center">P6.0</td></tr><tr><td align="center">11</td><td align="center">保留</td></tr></tbody></table><p>其他PWM输出脚选择同理。</p><p>例：<strong>PWM0CR=11000000=0xC0</strong>，<br>  这个指令的功能是。</p><ul><li>允许输出PWM。</li><li>初始电平是高电平。</li><li>在P20输出PWM。</li><li>不允许中断。</li></ul><h3 id="3-5-设置PWM开启"><a href="#3-5-设置PWM开启" class="headerlink" title="3.5 设置PWM开启"></a>3.5 设置PWM开启</h3><table><thead><tr><th align="center">符号</th><th align="center">地址</th><th align="center">B7</th><th align="center">B6</th><th align="center">B5</th><th align="center">B4</th><th align="center">B3</th><th align="center">B2</th><th align="center">B1</th><th align="center">B0</th></tr></thead><tbody><tr><td align="center">PWMCR</td><td align="center">FEH</td><td align="center">ENPWM</td><td align="center">ECBI</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><blockquote><p><strong>ENPWM</strong>:使能增强型<strong>PWM</strong>波形发生器</p><blockquote><p>0:关闭<strong>PWM</strong>波形发生器<br>1:使能<strong>PWM</strong>波形发生器，<strong>PWM</strong>计数器开始计数</p></blockquote><p>关于<strong>ENPWM</strong>控制位的重要说明:</p><blockquote><p><strong>ENPWM</strong> 一旦被使能后,内部的<strong>PWM</strong>计数器会立即开始计数,并与<strong>T1/T2</strong>两个触发点的值进行<br>比较。所以<strong>ENPWM</strong>必须在其他所有的PWM设置(包括<strong>T1/T2</strong>触发点的设置、初始电平的设<br>置、<strong>PWM</strong>异常检测的设置以及<strong>PWM</strong>中断设置)都完成后，最后才能使能<strong>ENPWM</strong>位。<br><strong>ENPWM</strong>控制位既是整个<strong>PWM</strong>模块的的使能位，也是<strong>PWM</strong>计数器开始计数的控制位。在<strong>PWM</strong><br>计数器计数的过程中，<strong>ENPWM</strong>控制位被关闭时，<strong>PWM</strong>计数会立即停止，当再次使能<strong>ENPWM</strong><br>控制位时，<strong>PWM</strong>的计数会从0开始重新计数，而不会记忆<strong>PWM</strong>停止计数前的计数值</p></blockquote><p><strong>ECBI</strong>:<strong>PWM</strong>计数器归零中断使能位</p><blockquote><p>0:关闭<strong>PWM</strong>计数器归零中断(<strong>CBIF</strong> 依然会被硬件置位)<br>1:使能<strong>PWM</strong>计数器归零中断</p></blockquote></blockquote><h2 id="L9110驱动芯片"><a href="#L9110驱动芯片" class="headerlink" title="L9110驱动芯片"></a>L9110驱动芯片</h2><h3 id="4-1-L9110S简介"><a href="#4-1-L9110S简介" class="headerlink" title="4.1 L9110S简介"></a>4.1 L9110S简介</h3><p><strong>L9110S</strong>是为控制和驱动电机设计的两通道推挽式功率放大专用集成电路器件，将分立电路集成在单片<strong>IC</strong>之中，使外围器件成本降低，整机可靠性提高。</p><p>该芯片有两个<strong>TTL／CMOS</strong>兼容电平的输入，具有良好的抗干扰性；两个输出端能直接驱动电机的正反向运动，它具有较大的电流驱动能力，每通道能通过<strong>750～800mA</strong>的持续电流，峰值电流能力可达<strong>1.5～2.0A</strong>；同时它具有较低的输出饱和压降与静态电流；内置的钳位二极管能释放感性负载的反向冲击电流，使它在驱动继电器、直流电机、步进电机或开关功率管的使用上安全可靠。<br><strong>L9110S</strong>被广泛应用于玩具汽车电机驱动、自动阀门电机驱动、电磁门锁驱动等电路上。</p><h3 id="4-2-L91110S基本参数"><a href="#4-2-L91110S基本参数" class="headerlink" title="4.2 L91110S基本参数"></a>4.2 L91110S基本参数</h3><ul><li>极限参数：<strong>800mA / 2.5V-12V</strong></li><li>低静态工作电流: <strong>0.00 uA</strong></li><li>宽电源电压范围：<strong>2.5V-12V</strong></li><li>每通道具有<strong>800mA</strong> 连续电流输出能力，精确快速的正反转控制</li><li>超低的饱和电压降</li><li><strong>TTL/CMOS</strong> 输出电平兼容，可直接连<strong>CPU</strong> </li><li>输出内置钳位二极管，适用于感性负载</li><li>精确的脉宽控制和后级驱动集成于单片<strong>IC</strong> 之中</li><li>具备管脚高压保护功能</li><li>工作温度：**-30 ℃-80 ℃**</li></ul><h3 id="4-3-管脚参数"><a href="#4-3-管脚参数" class="headerlink" title="4.3 管脚参数"></a>4.3 管脚参数</h3><p><img src="/images/L9110S.png" alt="管脚"></p><table>    <tr align="center">        <td>序号</td>        <td>1</td>        <td>2</td>        <td>3</td>        <td>4</td>        <td>5</td>        <td>6</td>        <td>7</td>        <td>8</td>    </tr>    <tr align="center">        <td>符号</td>        <td>OA</td>        <td>VCC</td>        <td>VCC</td>        <td>OB</td>        <td>GND</td>        <td>IA</td>        <td>IB</td>        <td>GND</td>    </tr>    <tr align="center">        <td>功能 </td>        <td>A路输出 </td>        <td>电源 </td>        <td>电源 </td>        <td>B路输出 </td>        <td>地址 </td>        <td>A路输入 </td>        <td>B路输入 </td>        <td>地线</td>    </tr></table><h3 id="4-4-方向与转速控制"><a href="#4-4-方向与转速控制" class="headerlink" title="4.4 方向与转速控制"></a>4.4 方向与转速控制</h3><p><strong>L9110S</strong>控制电机速度和方向非常简单，按上述真值表中的定义，只要向输入端<strong>IA/IB</strong>输入高电平则为转动，<strong>IA</strong>正转，<strong>IB</strong>为反转。</p><p>速度是通过调幅<strong>PWM</strong>信号进行控制，也就是对<strong>IA/IB</strong>写入不同的占空比范围即可控制电机的转速。</p><h2 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;STC8A8K64S4A12.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-comment">//测试工作频率为11.0592MHz</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i,j,a;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Sendbyte</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> dat)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Uart_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">char</span> <span class="hljs-title function_">Putchar</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">PWM0_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Button</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delay</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> xms)</span><span class="hljs-comment">//延时函数</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> i, j;<br><span class="hljs-keyword">while</span>(xms--)<br>&#123;<br>i = <span class="hljs-number">4</span>;<br>j = <span class="hljs-number">239</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-keyword">while</span> (--j);<br>&#125; <span class="hljs-keyword">while</span> (--i);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>a=<span class="hljs-number">1</span>;<br>j=<span class="hljs-number">1</span>;<br>i=<span class="hljs-number">0x800</span>;<span class="hljs-comment">//设置定时器初值</span><br>PWM0_Init();<span class="hljs-comment">//调用PWM0_Init()函数</span><br>Uart_Init();<span class="hljs-comment">//调用Uart_Init()函数</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>Button();<span class="hljs-comment">//调用Button()函数</span><br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Uart_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//9600bps@11.0592MHz</span><br>&#123;<br>PCON &amp;= <span class="hljs-number">0x7F</span>;<span class="hljs-comment">//波特率不倍速</span><br>SCON = <span class="hljs-number">0x50</span>;<span class="hljs-comment">//8位数据,可变波特率</span><br>AUXR &amp;= <span class="hljs-number">0xBF</span>;<span class="hljs-comment">//定时器时钟12T模式</span><br>AUXR &amp;= <span class="hljs-number">0xFE</span>;<span class="hljs-comment">//串口1选择定时器1为波特率发生器</span><br>TMOD &amp;= <span class="hljs-number">0x0F</span>;<span class="hljs-comment">//设置定时器模式</span><br>TMOD |= <span class="hljs-number">0x20</span>;<span class="hljs-comment">//设置定时器模式</span><br>TL1 = <span class="hljs-number">0xFD</span>;<span class="hljs-comment">//设置定时初始值</span><br>TH1 = <span class="hljs-number">0xFD</span>;<span class="hljs-comment">//设置定时重载值</span><br>ET1 = <span class="hljs-number">0</span>;<span class="hljs-comment">//禁止定时器%d中断</span><br>TR1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//定时器1开始计时</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Sendbyte</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> dat)</span><span class="hljs-comment">//上传字符</span><br>&#123;<br>    SBUF=dat;<br>    <span class="hljs-keyword">while</span> (!TI);<br>    TI=<span class="hljs-number">0</span>;<br>    <br>&#125;<br><br><span class="hljs-type">char</span> <span class="hljs-title function_">Putchar</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span><span class="hljs-comment">//上传字符</span><br>&#123;<br>    Sendbyte(c);<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">PWM0_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//PWM初始化函数</span><br>&#123;<br>P_SW2=<span class="hljs-number">0x80</span>;<span class="hljs-comment">//打开设置开关</span><br>    PWMCKS=<span class="hljs-number">0X0b</span>;<span class="hljs-comment">//PWM配置寄存器,设置PWM时钟源系统时钟/12=11.0592Mhz/12；   </span><br>PWMC=<span class="hljs-number">0X1000</span>;<span class="hljs-comment">//设置PWM周期1000H </span><br>PWM0T1=i;<span class="hljs-comment">//设置低电平点</span><br>PWM0T2=<span class="hljs-number">0X0000</span>;<span class="hljs-comment">//设置高电平点</span><br>    PWMCFG = <span class="hljs-number">0x00</span>;<br>    PWMCR |=<span class="hljs-number">0x80</span>;<span class="hljs-comment">//使能PWM模块</span><br>    P_SW2 =<span class="hljs-number">0x00</span>;<span class="hljs-comment">//关闭设置开关</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Button</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//按键子函数</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(P30==<span class="hljs-number">0</span>)<span class="hljs-comment">//减速</span><br>&#123;<br>Delay(<span class="hljs-number">20</span>); <span class="hljs-comment">//按键判断</span><br><span class="hljs-keyword">while</span> (P30==<span class="hljs-number">0</span>);<br>Delay(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0X1000</span>)<br>&#123;<br>i=i+<span class="hljs-number">0X0040</span>;<span class="hljs-comment">//改变占空比</span><br>&#125;<br>P_SW2=<span class="hljs-number">0x80</span>;<span class="hljs-comment">//打开设置</span><br>PWM0T1=i;<span class="hljs-comment">//设置低电平点  </span><br>PWM0T2=<span class="hljs-number">0X0000</span>;<span class="hljs-comment">//设置高电平点</span><br>PWM1T1=i;    <br>PWM1T2=<span class="hljs-number">0X0000</span>;<br>P_SW2 =<span class="hljs-number">0x00</span>;<span class="hljs-comment">//关闭设置</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Speed:%.3f%% &quot;</span>,(<span class="hljs-number">1</span>-i/<span class="hljs-number">4096.0</span>)*<span class="hljs-number">100</span>);<span class="hljs-comment">//输出占空比到上位机</span><br>&#125;<br><span class="hljs-keyword">if</span>(P31==<span class="hljs-number">0</span>)<span class="hljs-comment">//加速</span><br>&#123;<br>Delay(<span class="hljs-number">20</span>); <br><span class="hljs-keyword">while</span> (P31==<span class="hljs-number">0</span>);<br>Delay(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)<br>&#123;<br>i=i<span class="hljs-number">-0X0040</span>;<br>&#125;<br>P_SW2=<span class="hljs-number">0x80</span>;<br>PWM0T1=i;<br>PWM0T2=<span class="hljs-number">0X0000</span>;<br>PWM1T1=i;<br>PWM1T2=<span class="hljs-number">0X0000</span>;<br>P_SW2 =<span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Speed:%.3f%% &quot;</span>,(<span class="hljs-number">1</span>-i/<span class="hljs-number">4096.0</span>)*<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(P32==<span class="hljs-number">0</span>)<span class="hljs-comment">//换向</span><br>&#123;<br>Delay(<span class="hljs-number">20</span>); <br><span class="hljs-keyword">while</span> (P32==<span class="hljs-number">0</span>);<br>Delay(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span>(j==<span class="hljs-number">1</span>)<br>&#123;<br>a=<span class="hljs-number">1</span>;<br>j=<span class="hljs-number">0</span>;<br>P_SW2=<span class="hljs-number">0x80</span>;<br>PWM0CR = <span class="hljs-number">0xC0</span>;<span class="hljs-comment">//在P20输出PWM0，初始高电平</span><br>PWM1CR = <span class="hljs-number">0X00</span>;<span class="hljs-comment">//关闭P21输出PWM1</span><br>P_SW2 =<span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Forward &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>a=<span class="hljs-number">1</span>;<br>j=<span class="hljs-number">1</span>;<br>P_SW2=<span class="hljs-number">0x80</span>;<br>PWM1CR = <span class="hljs-number">0xC0</span>;<span class="hljs-comment">//在P21输出PWM0，初始高电平</span><br>PWM0CR = <span class="hljs-number">0X00</span>;<span class="hljs-comment">//关闭P20输出PWM1</span><br>P_SW2 =<span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Backward &quot;</span>);<br>&#125;<br>P_SW2=<span class="hljs-number">0x80</span>;<br>PWM0T1=i;<br>PWM0T2=<span class="hljs-number">0X0000</span>;<br>PWM1T1=i;<br>PWM1T2=<span class="hljs-number">0X0000</span>;<br>P_SW2 =<span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Speed:%.3f%% &quot;</span>,(<span class="hljs-number">1</span>-i/<span class="hljs-number">4096.0</span>)*<span class="hljs-number">100</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(P33==<span class="hljs-number">0</span>)<span class="hljs-comment">//停止&amp;启动</span><br>&#123;<br>Delay(<span class="hljs-number">20</span>); <br><span class="hljs-keyword">while</span> (P33==<span class="hljs-number">0</span>);<br>Delay(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)<br>&#123;<br>a=<span class="hljs-number">0</span>;<br>P_SW2=<span class="hljs-number">0x80</span>;<br>PWM0CR = <span class="hljs-number">0x00</span>;<span class="hljs-comment">//关闭P20输出PWM0</span><br>PWM1CR = <span class="hljs-number">0X00</span>;<span class="hljs-comment">//关闭P21输出PWM1</span><br>P_SW2 =<span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Stop &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<br>&#123;<br>a=<span class="hljs-number">1</span>;<br>P_SW2=<span class="hljs-number">0x80</span>;<br>PWM0CR = <span class="hljs-number">0xC0</span>;<span class="hljs-comment">//在P20输出PWM0，初始高电平</span><br>PWM1CR = <span class="hljs-number">0X00</span>;<span class="hljs-comment">//关闭P21输出PWM1</span><br>P_SW2 =<span class="hljs-number">0x00</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Start &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>a=<span class="hljs-number">1</span>;<br>P_SW2=<span class="hljs-number">0x80</span>;<br>PWM1CR = <span class="hljs-number">0xC0</span>;<span class="hljs-comment">//在P21输出PWM0，初始高电平</span><br>PWM0CR = <span class="hljs-number">0X00</span>;<span class="hljs-comment">//关闭P20输出PWM1</span><br>P_SW2 =<span class="hljs-number">0x00</span>;<span class="hljs-comment">//关闭设置</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Start &quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Speed:%.3f%% &quot;</span>,(<span class="hljs-number">1</span>-i/<span class="hljs-number">4096.0</span>)*<span class="hljs-number">100</span>);<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SAO_Knight</category>
      
    </categories>
    
    
    <tags>
      
      <tag>51单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于51单片机数码管的时钟显示</title>
    <link href="/2022/04/06/shizhong/"/>
    <url>/2022/04/06/shizhong/</url>
    
    <content type="html"><![CDATA[<h2 id="基于51单片机定时的数码管显示时间"><a href="#基于51单片机定时的数码管显示时间" class="headerlink" title="基于51单片机定时的数码管显示时间"></a>基于51单片机定时的数码管显示时间</h2><h3 id="单片机的定时器中断"><a href="#单片机的定时器中断" class="headerlink" title="单片机的定时器中断"></a>单片机的定时器中断</h3><p>  <strong>51单片机</strong>内部有两个16位可以编程的定时器<strong>T0</strong>/计数器<strong>T1</strong>，<strong>52单片机</strong>内多了一个<strong>T2</strong>定时器/计数器。</p><p>定时器/计数器的实质是<strong>加1计数器(16位)</strong>,由高 8 位和低 8 位 2 个寄存器组成。<br>  <strong>TMOD</strong> 是定时器/计数器的工作方式寄存器，确定工作方式和功能<br>  <strong>TCON</strong> 是控制寄存器，控制 <strong>T0</strong>、<strong>T1</strong> 的启动和停止及设置溢出标志。</p><p>加 1 计数器输入的计数脉冲有两个来源，一个是由系统的时钟振荡器输出脉冲经 12 分频后送来，另一个是 <strong>T0</strong> 或 <strong>T1</strong> 引脚输入的外部脉冲源，每来一个脉冲计数器加 1,当加到计数器为全 1 时，再输入一个脉冲就使计数器回零，且计数器的溢出使 <strong>TCON</strong> 寄存器中 <strong>TF0</strong> 或 <strong>TF1</strong> 置 1,向 <strong>CPU</strong> 发出中断请求(定时器/计数器中断允许时)。<br>如果定时器/计数器工作于定时模式，则表示定时时间已到；<br>如果工作于计数模式，则表示计数值已满。</p><p>由上可知，由溢出的计数器的值减去计数初值才是计数器的计数值。<br>设置为定时器模式时，加 1 计数器是对内部机器周期计数(<strong>1</strong> 个机器周期等于 <strong>12</strong> 个振荡周期，即计数频率为晶振频率的 <strong>1/12</strong>)。<br>计数值 <strong>N</strong> 乘以机器周期 <strong>T</strong> 就是定时时间 <strong>t</strong>。</p><hr><h3 id="定时器初值计算"><a href="#定时器初值计算" class="headerlink" title="定时器初值计算"></a>定时器初值计算</h3><p>定时时间 <strong>T=(2 的 N 次方-X)12/单片机晶振频率</strong>（方式0时，<strong>N=13</strong>。方式1时，<strong>N=16</strong>。方式2时，<strong>N=8</strong>。）</p><blockquote><p>打个比方:计时 2ms,当晶振为 12Mhz。</p><blockquote><p>方法一 :定时时间 <strong>2ms=(2 的 16 次方-时间常数 X)12/f</strong> 即晶振为 <strong>12M f =121000000</strong><br><strong>2ms=(2 的 16 次方-时间常数 X)12/(121000000)</strong></p></blockquote><blockquote><p>方法二 :<strong>12MHz</strong> 除 <strong>12</strong> 为 <strong>1MHz</strong>，也就是说<strong>1s = 1000000</strong> 次机器周期。<strong>2ms = 50000</strong> 次 机器周期。</p></blockquote></blockquote><blockquote><p>时间常数 <strong>X=2000</strong></p><blockquote><p><strong>TH0=(65536-2000)/256</strong>; 就是转换成十六进制 再除以 <strong>256</strong> 取整数 即高 8 位送时间常数寄存器的高 8 位计数器<br><strong>TL0=(65536-2000)%256</strong>; 就是转换成十六进制 再除以 <strong>256</strong> 取余数 即低 8 位送时间常数寄存器的低 8 位计数器</p></blockquote></blockquote><p>单片机在使用定时器或计数器功能时，通常需要设置 2 个与定时器有关的寄存器:<br>定时器/计数器工作方式寄存器 <strong>TMOD</strong> 与定时器/计数器控制寄存器 <strong>TCON</strong>。</p><h4 id="定时器-计数器工作方式寄存器-TMOD"><a href="#定时器-计数器工作方式寄存器-TMOD" class="headerlink" title="定时器/计数器工作方式寄存器 TMOD"></a>定时器/计数器工作方式寄存器 TMOD</h4><p><strong>TMOD 各位定义如下表：</strong></p><table><thead><tr><th align="center">位序号</th><th align="center">D7</th><th align="center">D6</th><th align="center">D5</th><th align="center">D4</th><th align="center">D3</th><th align="center">D2</th><th align="center">D1</th><th align="center">D0</th></tr></thead><tbody><tr><td align="center">位符号</td><td align="center">GATE</td><td align="center">C/T</td><td align="center">M1</td><td align="center">M0</td><td align="center">GATE</td><td align="center">C/T</td><td align="center">M1</td><td align="center">M0</td></tr></tbody></table><p><strong>D7–D4</strong> 是定时器1,<strong>D3–D0</strong> 是定时器0<br><strong>TMOD</strong> 的高4位用于设置定时器1,低4位用于设置定时器0,对应4位含义如下：</p><blockquote><p><strong>GATE</strong>——门控制位。</p><blockquote><p><strong>GATE=0</strong>,定时器/计数器启动与停止仅受 <strong>TCON</strong> 寄存器中的 <strong>TRX(X=0, 1)</strong> 来控制;<br><strong>GATE=1</strong>,定时器/计数器启动与停止由 <strong>TCON</strong> 寄存器中的 <strong>TRX (X=0, 1)</strong> 和外部中断引脚 <strong>(INT0 或 INT1)</strong> 上的电平状态来共同控制.</p></blockquote></blockquote><blockquote><p><strong>C/T</strong>——定时器模式和计数器模式选择位。</p><blockquote><p><strong>C/T=1</strong>, 为计数器模式。<br><strong>C/T=0</strong>, 为定时器模式。</p></blockquote></blockquote><blockquote><p><strong>M1 M0</strong> 是工作方式选择位。<br>每个定时器计数器都有 4 种工作方式，它们由 <strong>M1 M0</strong> 设定,如下表所示</p></blockquote><table><thead><tr><th align="center">M1</th><th align="center">M0</th><th align="center">工作方式</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">方式 0 是 13 位定时器/计数器</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">方式 1 是 16 位定时器/计数器</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">方式 2 是 8 位初值自动重装的 8 位定时器/计数器</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">方式 3 是仅仅适用与 T0 分为两个 8 位计数器，T1 停止计数</td></tr></tbody></table><h4 id="定时器-计数器控制寄存器-TCON"><a href="#定时器-计数器控制寄存器-TCON" class="headerlink" title="定时器/计数器控制寄存器 TCON"></a>定时器/计数器控制寄存器 TCON</h4><p>定时器/计数器控制寄存器 <strong>TCON</strong> 在特殊功能寄存器中，字节地址为 <strong>88H</strong>, 位地址(由低位到高位)分别是 <strong>88H~8FH</strong>，可进行位寻址。<strong>TCON</strong> 寄存器用来控制定时器的启、停，以及标志定时器溢出和中断情况。单片机复位时，<strong>TCON</strong> 全部被清0.<br>其各位定义如下表所示.其中 <strong>TF1</strong>、 <strong>TR1</strong>、<strong>TF0</strong> 和 <strong>TR0</strong> 位用于定时器/计数器; <strong>IE1</strong>、 <strong>IT1</strong>、 <strong>IE0</strong> 和 <strong>IT0</strong> 位用于外部中断。</p><table><thead><tr><th align="center">位序号</th><th align="center">D7</th><th align="center">D6</th><th align="center">D5</th><th align="center">D4</th><th align="center">D3</th><th align="center">D2</th><th align="center">D1</th><th align="center">D0</th></tr></thead><tbody><tr><td align="center">位符号</td><td align="center">TF1</td><td align="center">TR1</td><td align="center">TF0</td><td align="center">TR0</td><td align="center">IE1</td><td align="center">IT1</td><td align="center">IE0</td><td align="center">IT0</td></tr><tr><td align="center">位地址</td><td align="center">8FH</td><td align="center">8EH</td><td align="center">8DH</td><td align="center">8CH</td><td align="center">8BH</td><td align="center">8AH</td><td align="center">89H</td><td align="center">88H</td></tr></tbody></table><p><strong>TF1</strong> 定时器 1 溢出标志位。当定时器 1 计满溢出时，由硬件使 TF1 置 1,并且申请中断。进入中断服务程序后，由硬件自动清 0.<br><code>注意，如果使用定时器的中断，那么该位完全不用人为去操作;如果使用软件查询方式的话，当查询到该位置 1 后，就需要用软件清 0.</code><br><strong>TR1</strong> 定时器 1 运行控制位。由软件清 0 关闭定时器 1.当 GATE=I 且 INT1 为高电平时， TR1 置 1,启动定时器 1;当 GATE=0 时， TRI 置 1, 启动定时器 1.<br><strong>TF0</strong> 定时器 0 溢出标志，其功能及操作方法同 <strong>TF1</strong>.<br><strong>TR0</strong> 定时器 0 运行控制位，其功能及操作方法同 <strong>TR1</strong>.<br><strong>IE1</strong> 外部中断 1 请求标志.</p><p>要让数码管显示时间要使用寄存器 <strong>TMOD</strong> 定时器 0，工作方式 1；</p><h3 id="例程"><a href="#例程" class="headerlink" title="例程"></a>例程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;STC8A8K64S4A12.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;intrins.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEG P1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT P0</span><br><br><span class="hljs-comment">//宏定义</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code SEG1[<span class="hljs-number">16</span>]=&#123;<span class="hljs-number">0xc0</span>,<span class="hljs-number">0xf9</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0xb0</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x92</span>,<span class="hljs-number">0x82</span>,<span class="hljs-number">0xf8</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0xc6</span>,<span class="hljs-number">0xa1</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0x8e</span>&#125;;<span class="hljs-comment">//段选码，无小数点（0~f）</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code SEG2[<span class="hljs-number">16</span>]=&#123;<span class="hljs-number">0x40</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x0e</span>&#125;;<span class="hljs-comment">//段选码，有小数点（0~f）</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> code Bit[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0xFE</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0xFB</span>,<span class="hljs-number">0xF7</span>&#125;;<span class="hljs-comment">//位选码，（1~4）</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<span class="hljs-comment">//计数</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> mm=<span class="hljs-number">0</span>,ss=<span class="hljs-number">0</span>;<span class="hljs-comment">//分秒</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">delay</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x)</span><span class="hljs-comment">//延时函数</span><br>&#123;<br><span class="hljs-keyword">while</span>(x--);<br>&#125;<br><br><span class="hljs-comment">// 按下按键分钟归零</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span><span class="hljs-comment">//显示函数</span><br>&#123;<br><span class="hljs-keyword">if</span>(ss%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<span class="hljs-comment">//偶数秒显示冒号</span><br>  &#123;<br>    <span class="hljs-comment">//秒数个位</span><br>    SEG= <span class="hljs-number">0xFF</span>;<br>    delay(<span class="hljs-number">1</span>);<br>    BIT = Bit[<span class="hljs-number">3</span>];<br>    SEG = SEG1[ss%<span class="hljs-number">10</span>];<br>    delay(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//秒数十位</span><br>    SEG= <span class="hljs-number">0xFF</span>;<br>    delay(<span class="hljs-number">1</span>);<br>    BIT = Bit[<span class="hljs-number">2</span>];<br>    SEG = SEG1[ss/<span class="hljs-number">10</span>];<br>    delay(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//分钟数个位</span><br>    SEG= <span class="hljs-number">0xFF</span>;<br>    delay(<span class="hljs-number">1</span>);<br>    BIT = Bit[<span class="hljs-number">1</span>];<br>    SEG = SEG2[mm%<span class="hljs-number">10</span>];<br>    delay(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//分钟数十位</span><br>    SEG= <span class="hljs-number">0xFF</span>;<br>    delay(<span class="hljs-number">1</span>);<br>    BIT = Bit[<span class="hljs-number">0</span>];<br>    SEG = SEG2[mm/<span class="hljs-number">10</span>];<br>    delay(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><span class="hljs-comment">//奇数秒不显示冒号</span><br>  &#123;<br>    <span class="hljs-comment">//秒数个位</span><br>    SEG= <span class="hljs-number">0xFF</span>;<br>    delay(<span class="hljs-number">1</span>);<br>    BIT = Bit[<span class="hljs-number">3</span>];<br>    SEG = SEG1[ss%<span class="hljs-number">10</span>];<br>    delay(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//秒数十位</span><br>    SEG= <span class="hljs-number">0xFF</span>;<br>    delay(<span class="hljs-number">1</span>);<br>    BIT = Bit[<span class="hljs-number">2</span>];<br>    SEG = SEG1[ss/<span class="hljs-number">10</span>];<br>    delay(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//分钟数个位</span><br>    SEG= <span class="hljs-number">0xFF</span>;<br>    delay(<span class="hljs-number">1</span>);<br>    BIT = Bit[<span class="hljs-number">1</span>];<br>    SEG = SEG1[mm%<span class="hljs-number">10</span>];<br>    delay(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//分钟数十位</span><br>    SEG= <span class="hljs-number">0xFF</span>;<br>    delay(<span class="hljs-number">1</span>);<br>    BIT = Bit[<span class="hljs-number">0</span>];<br>    SEG = SEG1[mm/<span class="hljs-number">10</span>];<br>    delay(<span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">T0_init</span><span class="hljs-params">()</span><span class="hljs-comment">//初始化计数函数 @12MHZ 50ms</span><br>&#123;<br>    TMOD = <span class="hljs-number">0x01</span>;<span class="hljs-comment">//计数器1模式</span><br>    TH0 = (<span class="hljs-number">65536</span><span class="hljs-number">-50000</span>)/<span class="hljs-number">256</span>; <span class="hljs-comment">//高位定义</span><br>    TL0 = (<span class="hljs-number">65536</span><span class="hljs-number">-50000</span>)%<span class="hljs-number">256</span>; <span class="hljs-comment">//低位定义</span><br>    EA = <span class="hljs-number">1</span>;<span class="hljs-comment">//开总中断</span><br>    ET0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//开T0中断</span><br>    TR0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//启动T0</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">button</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(P3^<span class="hljs-number">0</span>==<span class="hljs-number">0</span>)<br>  &#123;mm++;&#125;<br>  <span class="hljs-keyword">if</span>(P3^<span class="hljs-number">1</span>==<span class="hljs-number">0</span>)<br>  &#123;mm--;&#125;<br>  <span class="hljs-keyword">if</span>(P3^<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)<br>  &#123;mm=<span class="hljs-number">0</span>;&#125;<br>  <span class="hljs-keyword">if</span>(P3^<span class="hljs-number">3</span>==<span class="hljs-number">0</span>)<br>  &#123;ss=<span class="hljs-number">0</span>;&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><span class="hljs-comment">//主函数</span><br>&#123;<br>   T0_init();<span class="hljs-comment">//初始化计时</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>      display();<span class="hljs-comment">//调用显示函数</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">timer0_int</span><span class="hljs-params">()</span> interrupt 1<span class="hljs-comment">//中断函数</span><br>&#123;<br>  TH0 = (<span class="hljs-number">65536</span><span class="hljs-number">-50000</span>)/<span class="hljs-number">256</span>;<span class="hljs-comment">//回初值</span><br>  TL0 = (<span class="hljs-number">65536</span><span class="hljs-number">-50000</span>)%<span class="hljs-number">256</span>;<br>  i++;<span class="hljs-comment">//计数</span><br>  <span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>)<span class="hljs-comment">//20次为一秒</span><br>  &#123;<br>    i = <span class="hljs-number">0</span>;<br>    ss++;<span class="hljs-comment">//秒数加一</span><br>     <span class="hljs-keyword">if</span>(ss == <span class="hljs-number">60</span>)<span class="hljs-comment">//秒数满六十</span><br>     &#123;<br>      ss = <span class="hljs-number">0</span>;<span class="hljs-comment">//秒数归零</span><br>      mm++;<span class="hljs-comment">//分钟数加一</span><br>      <span class="hljs-keyword">if</span>(mm == <span class="hljs-number">60</span>)<span class="hljs-comment">//分钟数满六十</span><br>      &#123;<br>        mm = <span class="hljs-number">0</span>;<span class="hljs-comment">//分钟数归零</span><br>      &#125;<br>     &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SAO_Knight</category>
      
    </categories>
    
    
    <tags>
      
      <tag>51单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于使用Hexo搭建个人博客的简易教程</title>
    <link href="/2021/12/25/git-1/"/>
    <url>/2021/12/25/git-1/</url>
    
    <content type="html"><![CDATA[<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p><strong>作为一名技术爱好者，会习惯于记录自己在平常的实践过程中所总结出的心得或者是一些踩坑的过程，而作为首选的便是个人博客。如果租用云服务器便会有一笔开销，那么我们便可以使用 GitHub 来搭建自己的博客。</strong></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h2><p><strong>在搭建博客之前，我们需要准备一下环境。</strong></p><h3 id="Git的下载与安装"><a href="#Git的下载与安装" class="headerlink" title="Git的下载与安装"></a><strong>Git</strong>的下载与安装</h3><p>1、访问<a href="https://git-scm.com/"><strong>Git</strong></a>，下载对应的安装包，进行安装（简单的点击下一步）。</p><p>2、安装好之后，鼠标右键可以看到：<strong>Git Bash Here</strong>，点击后就可以打开 Git 界面。</p><p>3、输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">git --version<br></code></pre></td></tr></table></figure><p>4、如果出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">$ git --version<br>git version 2.35.1.windows.2<br></code></pre></td></tr></table></figure><p>就说明<strong>Git</strong>安装成功。</p><h3 id="Node-js的下载与安装"><a href="#Node-js的下载与安装" class="headerlink" title="Node js的下载与安装"></a><strong>Node js</strong>的下载与安装</h3><p>1、访问<a href="https://nodejs.org/en/download/"><strong>Node js</strong></a>，下载对应的安装包，进行安装（简单的点击下一步）。</p><p>2、安装好之后，配置环境变量，并在终端里面输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">node -v<br></code></pre></td></tr></table></figure><p>3、如果出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">$ node -v<br>v16.14.2<br></code></pre></td></tr></table></figure><p>就说明<strong>Node js</strong>安装成功.</p><h3 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a><strong>Hexo</strong>的安装</h3><p>1、安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">npm install hexo -g<br></code></pre></td></tr></table></figure><p>2、测试是否安装成功，命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hexo -v<br></code></pre></td></tr></table></figure><p>3、如果出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Bash">$ hexo -v<br>hexo-cli: 4.3.0<br>os: win32 10.0.22000<br>node: 16.14.2<br>v8: 9.4.146.24-node.20<br>uv: 1.43.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.18.1<br>modules: 93<br>nghttp2: 1.45.1<br>napi: 8<br>llhttp: 6.0.4<br>openssl: 1.1.1n+quic<br>cldr: 40.0<br>icu: 70.1<br>tz: 2021a3<br>unicode: 14.0<br>ngtcp2: 0.1.0-DEV<br>nghttp3: 0.1.0-DEV<br></code></pre></td></tr></table></figure><p>就说明<strong>Hexo</strong>安装成功</p><h3 id="安装Hexo依赖"><a href="#安装Hexo依赖" class="headerlink" title="安装Hexo依赖"></a>安装<strong>Hexo</strong>依赖</h3><p>1、安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">npm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><h2 id="Git-配置-SSH-Key"><a href="#Git-配置-SSH-Key" class="headerlink" title="Git 配置 SSH Key"></a><strong>Git 配置 SSH Key</strong></h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">配置SSH <span class="hljs-built_in">Key</span>的目的<br>可以免密的将本地的源码和资源上传到Github，无需每次都输账号和密码。<br></code></pre></td></tr></table></figure><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置<strong>SSH</strong></h3><p>1、先生成 SSH Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br><span class="hljs-comment">#这里的邮件地址是Github账号绑定的邮件地址</span><br></code></pre></td></tr></table></figure><p>输入生成命令后。连续回车三次即可。</p><p>可以看到在用户文件夹下生成了一个 SSH 文件夹<br><img src="/img/SSH1.png" alt="SSH文件夹"><br>进入到 SSH 文件夹，复制<em>id_rsa.pub</em>文件里全部内容<br><img src="/img/SSH2.png" alt="id_rsa.pub"><br>2、接着打开<strong>Github</strong>主页，点击个人设置，点击左侧的<strong>SSH and GPG keys</strong>，点击<strong>New SSH key</strong><br><img src="/img/SSH3.png" alt="添加SSH"><br>将<em>id_rsa.pub</em>复制的内容粘贴到<strong>key</strong>中，<strong>title</strong>随便起一个就行。<br><img src="/img/SSH4.png" alt="添加SSH"><br>点击 <strong>Add SSH key</strong><br>3、测试是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>输入测试命令后，接着输入 Yes，出现下面这个提示说明成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">$ ssh -T git@github.com<br>Hi SAOKnight! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>4、配置账号和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">$ git config --global user.name <span class="hljs-string">&quot;你的Github用户名&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;你的Github注册邮箱&quot;</span><br><span class="hljs-comment">#用户名和邮箱记得改为 自己的</span><br></code></pre></td></tr></table></figure><h2 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><p>1、开始之前先介绍一下 heox 的基本命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hexo new <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章</span><br>hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span><br>hexo generate <span class="hljs-comment">#生成静态页面至public目录</span><br>hexo server <span class="hljs-comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br>hexo deploy <span class="hljs-comment">#部署到GitHub</span><br>hexo <span class="hljs-built_in">help</span>  <span class="hljs-comment"># 查看帮助</span><br>hexo version  <span class="hljs-comment">#查看Hexo的版本</span><br></code></pre></td></tr></table></figure><p>对应的缩写，比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hexo n == hexo new<br>hexo g == hexo generate<br></code></pre></td></tr></table></figure><p>2、生成 Hexo 文件<br>新建一个保存博客的存放目录，比如我的是：<strong>E:\Blog</strong></p><p>首先进入到本地博客存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cd</span> E:\Blog<br></code></pre></td></tr></table></figure><p>然后初始化个人博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hexo init<br></code></pre></td></tr></table></figure><p>可以看到博客存放目录出现了如下内容：<br><img src="/img/BLOG1.png" alt="生成文件"></p><p>生成静态网页命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hexo g<br></code></pre></td></tr></table></figure><p>本地预览网页命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hexo s<br></code></pre></td></tr></table></figure><p>在浏览器输入访问：</p><p><a href="http://localhost:4000/">http://localhost:4000/</a></p><p>可以看到访问没问题。<br>但这个只是在本地预览，接着将这个博客部署到 Github。</p><h3 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h3><p>1、新建一个 Github 仓库<br>给仓库起个名称，注意！注意！注意！</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">仓库名称格式：用户名<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br>例如我的仓库名称为：SAOKnight<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span><br>因为这个仓库名称将作为你github博客的访问地址<br></code></pre></td></tr></table></figure><p>2、编辑_config.yml<br>_config.yml 在博客存放目录下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> git@github.com:SAOKnight/SAOKnight.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br>  <span class="hljs-meta">#repository仓库地址改为自己的</span><br>  <span class="hljs-meta">#branch看自己的github仓库是master还是main，我这里是main，所以就填写main</span><br><br></code></pre></td></tr></table></figure><p>3、发布到 github</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hexo d<br></code></pre></td></tr></table></figure><p>在浏览器访问</p><p><a href="https://saoknight.github.io/">https://SAOKnight.github.io/</a></p><p>可以看到成功访问</p><p>这个博客地址已经部署到了公网，感兴趣的读者也可以访问</p>]]></content>
    
    
    <categories>
      
      <category>SAO_Knight</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>诚信主题班会</title>
    <link href="/2021/12/24/class-meeting/"/>
    <url>/2021/12/24/class-meeting/</url>
    
    <content type="html"><![CDATA[<p><tittle><font size='6'>机器人工程212诚信班会</font></tittle></p><blockquote><b>人无信不立，家无信不和，业无信不兴，国无信不盛。</b></blockquote><h1 id="何为诚信？"><a href="#何为诚信？" class="headerlink" title="何为诚信？"></a>何为诚信？</h1><blockquote>诚信，是立人之本，人无信而不立。</blockquote>     <p>诚，即真诚、诚实；信，即守承诺、讲信用。诚信的基本含义是守诺、无欺。通俗地表述，就是说老实话、办老实事、做老实人。    诚信不仅是一种品行，更是一种责任；不仅是一种道义，更是一种准则；不仅是一种声誉，更是一种高尚品质的体现。    诚信是高尚的人格力量，他是中华民族的传统美德，也是公民的一项基本道德责任，是为人处事之本；是我们当代学生必须具备的美好品质。</p>  <blockquote><p>诚信：诚实，守信用</p> ———《现代汉语词典》</blockquote>    <p>可见，诚信的本义就是要诚实、诚恳、守信、有信，反对隐瞒欺诈、反对伪劣假冒、反对弄虚作假。诚信就是诚实守信。</p><h1 id="诚信小故事"><a href="#诚信小故事" class="headerlink" title="诚信小故事"></a>诚信小故事</h1><h2 id="一诺千金"><a href="#一诺千金" class="headerlink" title="一诺千金"></a>一诺千金</h2><p>源于《史记》。季布是楚国的义士，他生性耿直，乐善好施，特别是他答应过的事情，无论困难再大，他都一定要设法办好，所以深受当时人们的赞誉。当时有个叫曹邱生的人，特地去见季布。并说：“我听楚人说过：得到百斤黄金，也抵不上季布的一个诺言。” 后来，人们把这个故事概括为“一诺千金”，用来比喻重视诺言，说话算数。</p><h2 id="一棵樱桃树"><a href="#一棵樱桃树" class="headerlink" title="一棵樱桃树"></a>一棵樱桃树</h2><p>华盛顿用小斧头砍刀了他父亲的一颗樱桃树。父亲见心爱的树被砍，非常气愤，扬言要给那个砍树的一顿教训。而华盛顿在盛怒的父亲面前毫不避讳地承认了自己的错误。父亲被感动了，称华盛顿的诚实比所有樱桃树都要宝贵的多。 </p><p>同样是美国总统尼克松困在“水门事件”中撒谎败露而被迫引咎辞职；克林顿也因为不光彩的绯闻案中撒谎而险遭弹劾。一个因诚实而受到爱戴和尊敬，两位因撒谎而在政史上留下污点。</p><h2 id="心"><a href="#心" class="headerlink" title="心"></a>心</h2><p>清代乾隆年间，南昌城有一点心店主李沙庚，最初，以货真价实赢得顾客满门。但其赚钱后便搀杂使假，对顾客也怠慢起来，生意日渐冷落。一日，书画名家郑板桥来店进餐，李沙庚惊喜万分，恭请题写店名。郑板桥挥毫题定“李沙庚点心店”六字，墨宝苍劲有力，引来众人观看，但还是无人进餐。原来“心”字少写了一点，李沙庚请求补写一点。但郑板桥却说：“没有错啊，你以前生意兴隆，是因为‘心’有了这一点，而今生意清淡，正因为‘心’少了这一点。”李沙庚感悟，才知道经营人生的重要。从此以后，痛改前非，又一次赢得了人心，赢得了市场。</p><h2 id="罗斯福家被盗"><a href="#罗斯福家被盗" class="headerlink" title="罗斯福家被盗"></a>罗斯福家被盗</h2><p>美国总统富兰克林·罗斯福的家被洗劫的时候：</p>  <p> 罗斯福的一个朋友赶紧写信来询问和安慰他，信中写道：“亲爱的总统先生，听说您的家被洗劫了，我甚为担心。上帝可真是不公平，他怎么能够让您这么伟大的人物遭此不幸呢！不管您丢了什么东西，我都希望您能以身体和精神为重，别为此过多分心，以免影响健康。祝您早日开心。” </p>  <p> 罗斯福先生读完这封信，立即提笔回信道：“亲爱的朋友，谢谢您来信安慰我。我现在很平安，无论身体情况还是精神状况都很好，所以您完全没有必要为我担心。上帝真是太公平了，因为以下三个理由，我由衷地感谢上帝：</p><p>一、贼只是偷去了我的财物，而没有伤害我的身体；</p><p>二、贼偷去的只是我的部分财物，而不是全部；</p><p>三、这最后一点也是我感觉最值得庆幸的一点，做贼的是他而不是我！</p><p>当我们已经无能为力时，用精神胜利法帮自己在极为不利的状况中发现好的、光明的一面，不失为一种明智、必要之举。</p><h1 id="弘扬诚信美德"><a href="#弘扬诚信美德" class="headerlink" title="弘扬诚信美德"></a>弘扬诚信美德</h1><ul><li>失去了诚信，就等同于敌人毁灭了自己。 ——莎士比亚</li><li>一言既出，驷马难追。 — 《论语颜渊》</li><li>蚜虫吃青草，锈吃铁，虚伪吃灵魂。—契诃夫</li><li>我们应该老老实实地办事。—毛泽东</li><li>不讲诚信的人，是可悲的、可怜的、可恨的，也是可怕的。生命不可能从谎言中开出灿烂的鲜花，创起诚信校园，树起诚信学风，成为诚信学子。</li><li>人而无信，不知其可也。——孔子</li><li>言不信者，行不果。——墨子</li><li>诚信为人之本。——鲁迅</li><li>你必须以诚待人，别人才会以诚相报。——李嘉诚</li><li>诚实是人生永远最美好的品格。——高尔基。</li></ul><h1 id="诚信考试与诚信考场"><a href="#诚信考试与诚信考场" class="headerlink" title="诚信考试与诚信考场"></a>诚信考试与诚信考场</h1><p><font size='5'>法律法规《国家教育考试违规处理办法》</font></p><blockquote>第六条　考生违背考试公平、公正原则，以不正当手段获得或者试图获得试题答案、考试成绩，有下列行为之一的，应当认定为考试作弊：   <ul><li> (一)携带与考试内容相关的文字材料或者存储有与考试内容相关资料的电子设备参加考试的；</li>   <li> (二)抄袭或者协助他人抄袭试题答案或者与考试内容相关的资料的；</li>    <li>(三)抢夺、窃取他人试卷、答卷或者强迫他人为自己抄袭提供方便的；</li>    <li>(四)在考试过程中使用通讯设备的；</li>    <li>(五)由他人冒名代替参加考试的；</li>   <li> (六)故意销毁试卷、答卷或者考试材料的；</li>    <li>(七)在答卷上填写与本人身份不符的姓名、考号等信息的；</li>    <li>(八)传、接物品或者交换试卷、答卷、草稿纸的；</li>    <li>(九)其他作弊行为。</li></ul></blockquote><h2 id="诚信考试目的"><a href="#诚信考试目的" class="headerlink" title="诚信考试目的"></a>诚信考试目的</h2><p>诚信考试的目的是通过考试培养学生的诚信品质</p><blockquote><ul><li>测试你对某门课的掌握程度</li><li>测试你的学习技巧和记忆力</li><li>评估教师的教学质量，了解哪些教得不错、哪些需要加强</li><li>最重要的是，测试你是否诚实</li></ul></blockquote><h2 id="诚信考试的意义"><a href="#诚信考试的意义" class="headerlink" title="诚信考试的意义"></a>诚信考试的意义</h2><p>可以让学生排除外界干扰，让学生正确认识考试对评价自己的重要性。充分利用一切时间，认真复习，满怀信心地迎接考试；可以让提高自身修养，做一名诚信学生。</p><blockquote><ul><li>更好地牢记诚信是中华民族传统美德</li><li>自觉改正规范不诚信行为</li><li>做礼貌考生</li></ul></blockquote><h1 id="对大家的祝愿"><a href="#对大家的祝愿" class="headerlink" title="对大家的祝愿"></a>对大家的祝愿</h1><p>希望大家发扬良好的班风，树立起一面积极向上的旗帜。<br>希望人人都能学有所用，学有所长，做一个诚实自信而又有活力的大学生。</p><h1 id="宣誓"><a href="#宣誓" class="headerlink" title="宣誓"></a>宣誓</h1><p>我承诺：<br>言必行，行必果。<br>知之为知之，不知为不知。<br>以诚信换取诚信，<br>以诚信收获成功。<br>用诚信开启知识之窗，<br>用诚信鼓起上进之帆。<br>我诚信，我光荣；<br>我诚信，我自尊；<br>我诚信，我成功。</p>]]></content>
    
    
    <categories>
      
      <category>SAO_Knight</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学校</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于重装Windows10</title>
    <link href="/2021/12/21/windows/"/>
    <url>/2021/12/21/windows/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章来自于<b>Red_lnn</b>的<a href="https://blog.redlnn.top/2021/09/17/install-windows/">Blog</a>，仅用于测试<b>Hexo</b>是否正常运行</p></blockquote><h2 id="更新主板BIOS"><a href="#更新主板BIOS" class="headerlink" title="更新主板BIOS"></a>更新主板BIOS</h2><blockquote><p>BIOS 中具体哪个选项不会操作或者在什么位置可以<a href="https://baidu.com/">百度</a></p></blockquote><ol><li>准备一个大于等于 <b>8G</b> 的空U盘<li>格式化 U 盘为 <b>FAT32</b> 格式</li><li>去主板官网下载最新的 <b>BIOS</b>，解压放到U盘里</li><li>插入 U 盘，开机进入 <b>BIOS</b>，更新 <b>BIOS</b></li><li>更新时确保不断电，更新完成后第一次开机会提示按 F1 进入 <b>BIOS</b></li><li>在 <b>BIOS</b> 中打开 <b>XMP、快速启动、TPM、安全启动、CPU 虚拟化</b></li><li>在 <b>BIOS</b> 中开启 <b>【4G 以上解码 / 大于 4G 地址空间解码 / above 4g decoding】</b>和<b>【re-size BAR support (Resizable BAR)】</b></li><li>保存 <b>BIOS</b> 设置并重启</li></ol><blockquote>若重启无法进入系统，需要暂时关闭<b>【4G 以上解码 】</b>和<b>【re-size BAR support】</b></blockquote><h2 id="更新显卡BIOS"><a href="#更新显卡BIOS" class="headerlink" title="更新显卡BIOS"></a>更新显卡BIOS</h2><blockquote>若是全新安装系统，此处留待系统安装完后再进行</blockquote><ol><li>去显卡厂商官网（不是 <b>NVIDIA/AMD</b>，而是<b>华硕，微星</b>等品牌官网）下载最新的显卡 <b>BIOS</b></li><li>更新显卡 <b>BIOS</b> 并重启</li></ol><h2 id="重装-安装系统"><a href="#重装-安装系统" class="headerlink" title="重装/安装系统"></a>重装/安装系统</h2><blockquote>全新安装系统请从第 4 条开始，需要另外一台可以用的电脑</blockquote><ol><li>备份所有 C 盘的重要文件到其他分区，<b>记住 C 盘空间的总大小和剩余大小</b></li><li>备份一些程序的设置和数据（比如摄像头设置、QQ 聊天记录之类的，设置可以用手机拍照）<blockquote>QQ 聊天记录直接复制他的数据文件夹到其他分区即可，具体操作可以百度</blockquote></li><li>若有外部设备，如外置声卡和摄像头等，应提前获取好对应驱动的下载地址</li><li>在<b><a href="https://go.microsoft.com/fwlink/?LinkId=691209">这里</a></b>下载官方最新的系统安装盘制作工具</li><li>运行该工具，制作系统安装 U 盘</li><li>重启进入 <b>BIOS</b>，在 <b>BIOS</b> 中启动 U 盘中的安装程序</li><li>开始安装后选择<b>【没有激活密钥】</b>，安装方式为<b>【自定义】</b>，安装位置选择与<b> C 盘空间总大小和剩余大小一致的分区后开始安装</b></li><li>安装完并设置好进入系统</li><li>安装必备的运行库<b>（不要改安装位置，一直下一步就行）</b><blockquote>下面的几个 .Net 框架的下载链接不一定是最新的，详细可以去<a href="https://dotnet.microsoft.com/en-us/"> <b>.Net官网</b></a>查看<p><b><a href="https://www.ghxi.com/yxkhj.html">微软常用运行库合集（Visual C++系列）</a></b></p><ul><li><a href="https://dotnet.microsoft.com/download/dotnet/thank-you/runtime-desktop-5.0.10-windows-x64-installer">.NET Desktop Runtime 5.0.10 64 位</a></li><li><a href="https://dotnet.microsoft.com/download/dotnet/thank-you/runtime-desktop-5.0.10-windows-x86-installer">.NET Desktop Runtime 5.0.10 32 位</a></li><li><a href="https://dotnet.microsoft.com/download/dotnet/thank-you/runtime-desktop-3.1.19-windows-x64-installer">.NET Desktop Runtime 3.1.19 64 位</a></li><li><a href="https://dotnet.microsoft.com/download/dotnet/thank-you/runtime-desktop-3.1.19-windows-x86-installer">.NET Desktop Runtime 3.1.19 32 位</a></li></ul></blockquote></li><li>任务栏搜索框中搜索<b>【启用或关闭 Windows 功能】</b>并打开，勾选<b>【.Net Framework 3.5 (包含 .NET 2.0 和 3.0)】</b>并确定</li><li>激活系统（激活方法问我）</li><li>打开<b>【Microsoft Store】</b>（系统应用商店），获取所有程序的更新</li><li>打开主板官网，下载芯片组驱动、网卡驱动、内置声卡驱动（有外部声卡也要下）<blockquote>具体要下载和安装哪些可以百度下载和安装驱动前建议先从下面的推荐软件列表下载安装解压缩软件</blockquote></li><li>去 <b>NVIDIA/AMD</b> 官网下载显卡驱动并安装<blockquote>不知道网址可以<a href="https://baidu.com">百度</a></blockquote></li><li>安装外置声卡和摄像头驱动（若有）、LGHUB 等外部设备的驱动和配套软件</li><li>安装必备的软件</li><blockquote>可以参考下文的软件推荐</blockquote></ol><h2 id="一些需要更改的系统配置"><a href="#一些需要更改的系统配置" class="headerlink" title="一些需要更改的系统配置"></a>一些需要更改的系统配置</h2><ul><li>虚拟内存<ol><li>任务栏搜索<b>【高级系统设置】</b>并打开</li><li>在弹出的<b>【系统属性】</b>窗口中的<b>【高级】</b>选项卡的<b>【性能】</b>部分点<b>【设置】</b>，在弹出的<b>【性能选项】</b>中选择<b>【高级】</b>选项卡，点击<b>【更改】</b></li><li>在弹出的<b>【虚拟内存】</b>窗口中，取消勾选<b>【自动管理所有驱动器的分页文件大小】</b>，选中 C 盘，再选中下方的【自定义大小】，填入 <b>800-1024</b>，再点击<b>【设置】</b>按钮；类似的，选中其他盘，设置为<b>【系统管理的大小】</b>，最后一路点击<b>【确定】</b>退出<b>【系统属性】</b>窗口</li></ol></li></ul><h2 id="推荐软件列表及下载地址"><a href="#推荐软件列表及下载地址" class="headerlink" title="推荐软件列表及下载地址"></a>推荐软件列表及下载地址</h2><h3 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3><ul><li><b>2345全家桶</b></li><li>任意使用<b>P2P下载器</b>进行下载的软件</li></ul><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ul><li>微软自家的<a href="https://www.microsoft.com/zh-cn/edge/business/download"><b>Edge</b></a></li><li>Google家的<a href="https://www.google.cn/chrome/index.html"><b>Chrome</b></a></li></ul><h3 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h3><ul>]]></content>
    
    
    <categories>
      
      <category>Red_lnn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>教程</tag>
      
      <tag>Red_lnn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
